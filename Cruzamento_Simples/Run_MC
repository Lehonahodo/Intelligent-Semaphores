#!/usr/bin/env python
# Eclipse SUMO, Simulation of Urban MObility; see https://eclipse.org/sumo
# Copyright (C) 2009-2019 German Aerospace Center (DLR) and others.
# This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v2.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v20.html
# SPDX-License-Identifier: EPL-2.0

# @file    runner.py
# @author  Lena Kalleske
# @author  Daniel Krajzewicz
# @author  Michael Behrisch
# @author  Jakob Erdmann
# @date    2009-03-26
# @version $Id$

from __future__ import absolute_import
from __future__ import print_function

import os
import sys
import optparse
import random
import traci.constants as tc

# we need to import python modules from the $SUMO_HOME/tools directory
if 'SUMO_HOME' in os.environ:
    tools = os.path.join(os.environ['SUMO_HOME'], 'tools')
    sys.path.append(tools)
else:
    sys.exit("please declare environment variable 'SUMO_HOME'")

from sumolib import checkBinary  # noqa
import traci  # noqa

# --------------------------------------------------------------------------------------------------

# Funcao para episodiar os acontecimentos. Iremos dizer que um episodio por enquanto equivale a um timestep
def play_episodes(environment, n_episodes, policy):
    wins = 0
    total_reward = 0
	
    #for every step during the simulation
    for step in range(n_episodes):

        terminated = False
        #state = environment.reset()
        
		#the simulation is still running
        while not terminated:

            # Select best action to perform in a current state
            action = np.argmax(policy[state])

            # Perform an action an observe how environment acted in response
			# Aqui precisarei talves determinar uma função que faça essa ação, mas calma por enquanto
            next_state, reward, terminated, info = environment.step(action)

            # Summarize total reward
            total_reward += reward

            # Update current state
            state = next_state

            # Calculate number of wins over episodes
            if terminated and reward == 1.0:
                wins += 1

    average_reward = total_reward / n_episodes

    return wins, total_reward, average_reward


# --------------------------------------------------------------------------------------------------


# Functions to find best policy
solvers = [
    ('Policy Iteration', policy_iteration),
    ('Value Iteration', value_iteration)
]

for iteration_name, iteration_func in solvers:

    # Load a Frozen Lake environment
	# Substituir por abrir um Gui simulator e environment será um array com as informações  (nSTATES, nACTIONS)
    environment = [100,2]

    # Search for an optimal policy using policy iteration
    policy, V = iteration_func(environment.env)

    print(f'\n Final policy derived using {iteration_name}:')
    print(' '.join([action_mapping[action] for action in np.argmax(policy, axis=1)]))

    # Apply best policy to the real environment
    wins, total_reward, average_reward = play_episodes(environment, n_episodes, policy)

    print(f'{iteration_name} :: number of wins over {n_episodes} episodes = {wins}')
    print(f'{iteration_name} :: average reward over {n_episodes} episodes = {average_reward} \n\n')



# --------------------------------------------------------------------------------------------------


def run():
    """execute the TraCI control loop"""
    step = 0
    count = 0
    """ Number of executions"""
    while step < 1000:
        traci.simulationStep()
		
		#Se passou um veiculo. Ou seja um Contador
        if traci.inductionloop.getLastStepVehicleNumber("e1Detector_Faixa_7_0_0") > 0:
            count += 1
            print ('Numero de Veiculos', count)
            x = traci.trafficlight.getNextSwitch("Inter")
            # print (x)

        phase = traci.trafficlight.getPhaseDuration("Inter")
        print ('Duracao do Semaforo',phase)
			
        #Logica do semaforo
        #logic = traci.trafficlight.getCompleteRedYellowGreenDefinition('Inter')
        #print ('Logica do semaforo',logic)
        """[Logic(programID='0', type=0, currentPhaseIndex=2, phases=[Phase(duration=42.0, 
        state='GGGGrrrrGGGGgrrrr', minDur=42.0, maxDur=42.0, next=-1), Phase(duration=3.0, 
        state='yyyyrrrryyyyyrrrr', minDur=3.0, maxDur=3.0, next=-1), Phase(duration=42.0, 
        state='rrrrGGGGrrrrrGGGG', minDur=42.0, maxDur=42.0, next=-1), Phase(duration=3.0, 
        state='rrrryyyyrrrrryyyy', minDur=3.0, maxDur=3.0, next=-1)], subParameter={})]"""
		
        #Variavel Norte/Sul que soma o número de veículos nesse fluxo a cada timestep
        nor_sul=traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_7_0_0") + traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_7_1_1") + traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_7_2_2") + traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_3_0_0") + traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_3_1_1") + traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_3_2_2")
		
        #Variavel Leste/Oeste que soma o número de veículos nesse fluxo a cada timestep
        les_oes=traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_5_0_0") + traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_5_1_1") + traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_5_2_2") + traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_1_0_0") + traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_1_1_1") + traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_1_2_2")

        print ('Veiculos na via Norte/Sul: ',nor_sul)
        print ('Veiculos na via Leste/Oeste: ',les_oes)		
		
        z =	traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_5_0_0") + traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_5_1_1") + traci.lanearea.getLastStepVehicleNumber("e2Detector_Faixa_5_2_2")
        y = traci.lanearea.getJamLengthVehicle("e2Detector_Faixa_5_0_0") + traci.lanearea.getJamLengthVehicle("e2Detector_Faixa_5_1_1") + traci.lanearea.getJamLengthVehicle("e2Detector_Faixa_5_2_2")
        print ('Veiculos na Area', z)
        print ('Veiculos Parados', y)		
		
		#teste logica simples de mudança de fase (0 - nor sul, 1 - amarelo nor sul, 2 - les oes, 3 - amarelo les oes) - necessárias condições para mudança de fase ainda.
        if nor_sul>les_oes:
            traci.trafficlight.setPhase('Inter',0)	
        if les_oes>nor_sul:
            traci.trafficlight.setPhase('Inter',2)

			
        step += 1
	
    traci.junction.subscribeContext("Inter", tc.CMD_GET_VEHICLE_VARIABLE, 42, [tc.VAR_SPEED, tc.VAR_WAITING_TIME])
    print('Results: ', traci.junction.getContextSubscriptionResults("Inter"))
	
    scResults = traci.junction.getContextSubscriptionResults("Inter")
    halting = 0
    if scResults:
        relSpeeds = [d[tc.VAR_SPEED] / d[tc.VAR_ALLOWED_SPEED] for d in scResults.values()]
        # compute values corresponding to summary-output
        running = len(relSpeeds)
        halting = len([1 for d in scResults.values() if d[tc.VAR_SPEED] < 0.1])
        meanSpeedRelative = sum(relSpeeds) / running
        timeLoss = (1 - meanSpeedRelative) * running * stepLength
        print(traci.simulation.getTime(), timeLoss, halting)
   
    traci.close()
    sys.stdout.flush()  
 
 
 
# --------------------------------------------------------------------------------------------------


def get_options():
    optParser = optparse.OptionParser()
    optParser.add_option("--nogui", action="store_true",
                         default=False, help="run the commandline version of sumo")
    options, args = optParser.parse_args()
    return options


# --------------------------------------------------------------------------------------------------

# this is the main entry point of this script
if __name__ == "__main__":
    options = get_options()

    # this script has been called from the command line. It will start sumo as a
    # server, then connect and run
    if options.nogui:
        sumoBinary = checkBinary('sumo')
    else:
        sumoBinary = checkBinary('sumo-gui')


    # this is the normal way of using traci. sumo is started as a
    # subprocess and then the python script connects and runs
    traci.start([sumoBinary, "-c", "Cruz_Simples.sumocfg",
                             "--tripinfo-output", "tripinfo.xml"])
    run()